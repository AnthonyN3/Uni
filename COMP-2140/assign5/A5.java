import java.io.*;
import java.util.ArrayList;

public class A5 
{

	static int pointer = -1;	
	static ArrayList tokens = new ArrayList();


	public static void main(String[] args) throws Exception {
		//construct the token array
		BufferedWriter bw=new BufferedWriter(new FileWriter("a5.output"));
		A5Scanner scanner = new A5Scanner(new FileInputStream(new File("A5.tiny")));
		// note that yylex() is the default method to get the next token in scanner that is generated by JLlex.
		Symbol token; 
		while ((token=scanner.yylex()).sym != A5Sym.EOF) {
			tokens.add(token);
		}
		//tokens.add(token);   // add EOF as the last token in the array
		tokens.add(new Symbol(0));
		boolean legal= Program() && nextToken().sym==A5Sym.EOF;
		bw.write((legal)?"legal":"illegal");
		bw.close();
	}

	static Symbol nextToken() 
	{
		if (pointer < tokens.size()-1) {
			pointer++;
			Symbol token = (Symbol) tokens.get(pointer);
			System.out.println ("next Token: " + token.toString());
			return token;
		} else
			return null;
	}


	public static boolean Program() throws Exception
	{
		int savePointer = pointer;

		if(Method() && Program())
		{
			return true;
		}

		pointer = savePointer;
		if(Method())
		{
			return true;
		}
 

		pointer = savePointer;
		return false;
	}

	public static boolean Method() throws Exception
	{
		int savePointer = pointer;

		if(Type() && nextToken().sym == A5Sym.ID && nextToken().sym == A5Sym.OP && StartBracket() && nextToken().sym == A5Sym.CP && Block())
		{
			return true;
		}

		pointer = savePointer;
		if(Type() && nextToken().sym == A5Sym.MAIN && nextToken().sym == A5Sym.ID && nextToken().sym == A5Sym.OP && StartBracket() && nextToken().sym == A5Sym.CP && Block())
		{
			return true;
		}

		pointer = savePointer;
		return false;
	}

	public static boolean StartBracket() throws Exception
	{
		int savePointer = pointer;

		if(EndBracket() && nextToken().sym == A5Sym.COMMA && EndBracket() && nextToken().sym == A5Sym.COMMA && StartBracket())
		{
			return true;
		}

		pointer = savePointer;
		if( EndBracket() && nextToken().sym == A5Sym.COMMA && EndBracket())
		{
			return true;
		}

		pointer = savePointer;
		if(EndBracket())
		{
			return true;
		}

		pointer = savePointer;
		if(nextToken().sym == A5Sym.CP)
		{
			pointer = savePointer;
			return true;
		}

		pointer = savePointer;
		return false;
	}

	public static boolean EndBracket() throws Exception
	{
		int savePointer = pointer;

		if(Type() && nextToken().sym == A5Sym.ID)
		{
			return true;
		}

		pointer = savePointer;
		return false;
	}


	public static boolean Expr() throws Exception
	{
		int savePointer = pointer;
		if(Expr2() && nextToken().sym == A5Sym.PLUS && Expr() )
		{
			return true;
		}

		pointer = savePointer;
		if(Expr2() && nextToken().sym == A5Sym.MINUS && Expr() )
		{
			return true;
		}

		pointer = savePointer;
		if( Expr2() )
		{
			return true;
		}


		pointer = savePointer;
		return false;
	}


	public static boolean Expr2() throws Exception
	{
		int savePointer = pointer;
		if(Expr3() && nextToken().sym == A5Sym.TIMES && Expr2() )
		{
			return true;
		}

		pointer = savePointer;
		if(Expr3() && nextToken().sym == A5Sym.DIVIDE && Expr2() )
		{
			return true;
		}

		pointer = savePointer;
		if(Expr3())
		{
			return true;
		}

		pointer = savePointer;
		return false;
	}


	public static boolean Expr3() throws Exception
	{
		int savePointer = pointer;
		if( nextToken().sym == A5Sym.OP && Expr() && nextToken().sym == A5Sym.CP)
		{
			return true;
		}
		pointer = savePointer;
		
		if(FunctionCall())
		{
			return true;
		}
		pointer = savePointer;
		if( nextToken().sym == A5Sym.NUM)
		{
			return true;
		}

		pointer = savePointer;
		if( nextToken().sym == A5Sym.ID )
		{
			return true;
		}

		pointer = savePointer;
		if( nextToken().sym == A5Sym.QUOTE)
		{
			return true;
		}

		pointer = savePointer;
		return false;
	}

	public static boolean FunctionCall() throws Exception
	{
		int savePointer = pointer;

		if( nextToken().sym == A5Sym.ID && nextToken().sym == A5Sym.OP && OpenList() && nextToken().sym == A5Sym.CP)
		{
			return true;
		}


		pointer = savePointer;
		return false;
	}

	public static boolean OpenList() throws Exception 
	{
		int savePointer = pointer;

		if(ParamList() && nextToken().sym == A5Sym.COMMA && ParamList() && nextToken().sym == A5Sym.COMMA && OpenList() )
		{
			return true;
		}

		pointer = savePointer;
		if(ParamList() && nextToken().sym == A5Sym.COMMA && ParamList())
		{
			return true;
		}

		pointer = savePointer;
		if(ParamList())
		{
			return true;
		}

		if(nextToken().sym == A5Sym.CP)
		{
			pointer = savePointer;
			return true;
		}

		pointer = savePointer;
		return false;
	}

	public static boolean ParamList() throws Exception 
	{
		int savePointer = pointer;

		if(Expr3())
		{
			return true;
		}

		pointer = savePointer;
		return false;
	}

	public static boolean BoolExpr() throws Exception
	{
		int savePointer = pointer;

		if( Expr() && nextToken().sym == A5Sym.EQUAL && Expr() )
		{
			return true;
		}

		pointer = savePointer;
		if( Expr() && nextToken().sym == A5Sym.NOTEQUAL && Expr() )
		{
			return true;
		}

		pointer = savePointer;
		return false;
	}

	public static boolean ReadmStmt() throws Exception
	{
		int savePointer = pointer;

		if(nextToken().sym == A5Sym.READ && nextToken().sym == A5Sym.OP && nextToken().sym == A5Sym.ID && nextToken().sym == A5Sym.COMMA && nextToken().sym == A5Sym.QUOTE && nextToken().sym == A5Sym.CP && nextToken().sym == A5Sym.SEMICOLON)
		{
			return true;
		}


		pointer = savePointer;
		return false;
	}

	public static boolean WriteStmt() throws Exception
	{
		int savePointer = pointer;

		if(nextToken().sym == A5Sym.WRITE && nextToken().sym == A5Sym.OP && Expr() && nextToken().sym == A5Sym.COMMA && nextToken().sym == A5Sym.QUOTE && nextToken().sym == A5Sym.CP && nextToken().sym == A5Sym.SEMICOLON)
		{
			return true;
		}


		pointer = savePointer;
		return false;
	}

	public static boolean AssignStmt() throws Exception
	{
		int savePointer = pointer;

		if(nextToken().sym == A5Sym.ID && nextToken().sym == A5Sym.ASSIGN && Expr() && nextToken().sym == A5Sym.SEMICOLON)
		{
			return true;
		}


		pointer = savePointer;
		return false;
	}

	public static boolean ReturnStmt() throws Exception
	{
		int savePointer = pointer;

		if(nextToken().sym == A5Sym.RETURN && Expr() && nextToken().sym == A5Sym.SEMICOLON)
		{
			return true;
		}

		pointer = savePointer;
		return false;
	}

	public static boolean MultiStmt() throws Exception
	{
		int savePointer = pointer;

		if( Statement() && MultiStmt())
		{
			return true;
		}

		pointer = savePointer;
		if(Statement())
		{
			return true;	
		}

		pointer = savePointer;
		return false;
	}

	public static boolean Declaration() throws Exception
	{
		int savePointer = pointer;

		if( Type() && nextToken().sym == A5Sym.ID && nextToken().sym == A5Sym.SEMICOLON )
		{
			return true;
		}

		pointer = savePointer;
		if( Type() && AssignStmt() )
		{
			return true;
		}

		pointer = savePointer;
		return false;
	}

	public static boolean Type() throws Exception
	{
		int savePointer = pointer;

		if(nextToken().sym == A5Sym.INT)
		{
			return true;
		}

		pointer = savePointer;
		if(nextToken().sym == A5Sym.REAL)
		{
			return true;
		}

		pointer = savePointer;
		if(nextToken().sym == A5Sym.STRING)
		{
			return true;
		}

		pointer = savePointer;
		return false;
	}

	public static boolean Block() throws Exception 
	{
		int savePointer = pointer;

		if(nextToken().sym == A5Sym.BEGIN && MultiStmt() && nextToken().sym == A5Sym.END)
		{
			return true;
		}


		pointer = savePointer;
		return false;
	}

	public static boolean Statement() throws Exception
	{
		int savePointer = pointer;

		if (Block())
		{
			return true;
		}

		pointer = savePointer;
		if(Declaration())
		{
			return true;
		}

		pointer = savePointer;
		if(ReturnStmt())
		{
			return true;
		}

		pointer = savePointer;
		if(WriteStmt())
		{
			return true;
		}

		pointer = savePointer;
		if(ReadmStmt())
		{
			return true;
		}

		pointer = savePointer;
		if(AssignStmt())
		{
			return true;
		}

		pointer = savePointer;
		if(MatchIf())
		{
			return true;
		}


		pointer  = savePointer;
		return false;
	}

	public static boolean MatchIf() throws Exception
	{
		int savePointer = pointer;

		if( nextToken().sym == A5Sym.IF && nextToken().sym == A5Sym.OP && BoolExpr() && nextToken().sym == A5Sym.CP &&  Statement() && nextToken().sym == A5Sym.ELSE && Statement() )
		{
			return true;
		}

		pointer = savePointer;
		if( nextToken().sym == A5Sym.IF && nextToken().sym == A5Sym.OP && BoolExpr() && nextToken().sym == A5Sym.CP && Statement())
		{
			return true;
		}

		pointer = savePointer;
		return false;
	}

}
